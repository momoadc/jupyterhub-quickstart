kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: jupyterhub-workspace
  annotations:
    openshift.io/display-name: JupyterHub Workspace
    description: Template for deploying a JupyterHub instance with cluster access.
    iconClass: icon-python
    tags: python,jupyter,jupyterhub
parameters:
- name: SPAWNER_NAMESPACE
  value: 'jupyterhub'
  required: true
- name: CLUSTER_SUBDOMAIN
  value: 'apps.tk2s6gya.eastus.aroapp.io'
  required: true
- name: APPLICATION_NAME
  value: jupyterhub
  required: true
- name: JUPYTERHUB_IMAGE
  value: ghcr.io/momoadc/jupyterhub-quickstart/jupyterhub:v2.0.0
  required: true
- name: NOTEBOOK_IMAGE
  value: ghcr.io/momoadc/jupyter-notebooks/pyspark-notebook:v3.2.0-py39
  required: true
- name: JUPYTERHUB_CONFIG
  value: |
    """
    def get_ldap_groups(username):
      import ldap
      from ldap.filter import escape_filter_chars
      LDAP_SERVER = "ldap.server.com"
      baseDN = "ou=people,dc=example,dc=com"
      ldapUser = ""
      ldapPassword = ""
      ldapObj = ldap.initialize('ldap://%s' % LDAP_SERVER)
      ldapObj.simple_bind_s(ldapUser, ldapPassword)
      userdn = ldapObj.search_s(baseDN,ldap.SCOPE_SUBTREE, "(|(&(objectClass=*)(sAMAccountName=%s)))" % username, ["distinguishedName",])
      binaryGroups = ldapObj.search_s(baseDN,
                                      ldap.SCOPE_SUBTREE,
                                      "(member:1.2.840.113556.1.4.1941:={0})"
                                      .format(escape_filter_chars(userdn[0][1]['distinguishedName'][0].decode())),
                                      ['*',])
      groups = [group[0] for group in binaryGroups]

      # usualy you'd want to return groups but here we're using mock data
      return [
        'cn=group1,ou=groups,dc=example,dc=com',
        'cn=group2,ou=groups,dc=example,dc=com',
        'cn=group3,ou=groups,dc=example,dc=com',
        'cn=group4,ou=groups,dc=example,dc=com',
        'cn=group5,ou=groups,dc=example,dc=com'
      ]

    def read_config():
      import json

      configJson = {}
      with open("/opt/app-root/config.json", "r") as f:
        configJson = json.loads(f.read())

      return configJson


    def get_resource_requirements(username):
      profiles=[
        {
          'display_name': 'DemoDEF - choose me!!',
          'slug': 'Demo-python',
          'description': 'quay.io/ypery/jup-pyspark-py37-notebook:latest - 1 CPU & 512M RAM',
          'default': True,
          'kubespawner_override': {
            'image': 'quay.io/ypery/jup-pyspark-py37-notebook:latest',
            'cpu_limit': 1,
            'mem_limit': '512M',
          }
        },{
          'display_name': 'Training Env - Python',
          'slug': 'training-python',
          'default': True,
          'kubespawner_override': {
            'image': 'training/python:label',
            'cpu_limit': 1,
            'mem_limit': '512M',
          }
        }, {
          'display_name': 'Training Env - Datascience',
          'slug': 'training-datascience',
          'kubespawner_override': {
            'image': 'training/datascience:label',
            'cpu_limit': 2,
            'mem_limit': '1G',
          }
        }, {
          'display_name': 'DataScience - Small instance',
          'slug': 'datascience-small',
          'kubespawner_override': {
            'image': 'datascience/small:label',
            'cpu_limit': 3,
            'mem_limit': '2G',
          }
        }, {
          'display_name': 'DataScience - Medium instance',
          'slug': 'datascience-medium',
          'kubespawner_override': {
            'image': 'datascience/medium:label',
            'cpu_limit': 4,
            'mem_limit': '4G',
          }
        }
      ]

      userGroups = get_ldap_groups(username)
      config = read_config()
      for group in config['Groups']:
          if group['name'] in userGroups:
              profiles += group['profiles']
      return profiles

    def option_renderer(spawner):
      name = spawner.user.name
      return get_resource_requirements(name)

    c.KubeSpawner.profile_list = option_renderer
    """
    c.JupyterHub.authenticate_prometheus = False

    c.KubeSpawner.storage_pvc_ensure = True
    c.KubeSpawner.storage_capacity = os.environ.get("SINGLEUSER_PVC_SIZE", "1Gi")
    c.KubeSpawner.pvc_name_template = '{username}-nb-pvc'
    
   
    c.KubeSpawner.user_storage_class = os.environ.get("JUPYTERHUB_STORAGE_CLASS", c.KubeSpawner.user_storage_class)
    admin_users = os.environ.get('JUPYTERHUB_ADMIN_USERS')
    if admin_users:
      c.Authenticator.admin_users = set(admin_users.split(','))

    c.KubeSpawner.service_account = "notebook"
    c.KubeSpawner.init_containers = []
    c.KubeSpawner.image_pull_policy = "Always"

  required: false
- name: JUPYTERHUB_ENVVARS
  value: ''
  required: false
- name: ADMIN_USERS
  value: 'kubeadmin'
  required: false
- name: REGISTERED_USERS
  value: ''
  required: false
- name: DATABASE_PASSWORD
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: COOKIE_SECRET
  generate: expression
  from: "[a-f0-9]{32}"
  required: true
- name: JUPYTERHUB_MEMORY
  description: Amount of memory available to JupyterHub.
  value: 512Mi
  required: true
- name: DATABASE_MEMORY
  description: Amount of memory available to PostgreSQL.
  value: 512Mi
  required: true
- name: NOTEBOOK_MEMORY
  description: Amount of memory available to each notebook.
  value: 512Mi
  required: true
- name: NOTEBOOK_INTERFACE
  value: classic
- name: OPENSHIFT_PROJECT
  value: 'jupyterhub'
  required: false
- name: VOLUME_SIZE
  description: Amount of storage available to each user.
  value: ''
- name: IDLE_TIMEOUT
  description: Time in seconds after which idle session is culled.
  value: '2628000'
- name: OAUTH_CLIENT_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{32}"
- name: LDAP_SERVER
  value: test
  description: LDAP_SERVER, in base64
  required: true
- name: LDAP_BASEDN
  value: test
  description: LDAP_baseDN, in base64
  required: true
- name: LDAP_PASSWORD
  value: test
  description: LDAP_PASSWORD, in base64
  required: true
- name: LDAP_USERNAME
  value: test
  description: LDAP_USERNAME, in base64
  required: true

objects:
- apiVersion: v1
  data:
    LDAP_SERVER: "${LDAP_SERVER}"
    LDAP_BASEDN: "${LDAP_BASEDN}"
    LDAP_PASSWORD: "${LDAP_PASSWORD}"
    LDAP_USERNAME: "${LDAP_USERNAME}"
  kind: Secret
  metadata:
    name: ldap
    namespace: "${SPAWNER_NAMESPACE}"
  type: Opaque
- kind: OAuthClient
  apiVersion: oauth.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}-${SPAWNER_NAMESPACE}-users"
    labels:
      app: "${APPLICATION_NAME}"
  secret: "${OAUTH_CLIENT_SECRET}"
  grantMethod: auto
  redirectURIs:
  - https://${APPLICATION_NAME}-${SPAWNER_NAMESPACE}.${CLUSTER_SUBDOMAIN}/hub/oauth_callback
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-cfg"
    labels:
      app: "${APPLICATION_NAME}"
  data:
    jupyterhub_config.py: "${JUPYTERHUB_CONFIG}"
    jupyterhub_config.sh: "${JUPYTERHUB_ENVVARS}"
    admin_users.txt: "${ADMIN_USERS}"
    user_whitelist.txt: "${REGISTERED_USERS}"
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-hub"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.first: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${APPLICATION_NAME}"}}'
      serviceaccounts.openshift.io/oauth-redirecturi.first: hub/oauth_callback
      serviceaccounts.openshift.io/oauth-want-challenges: 'false'
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}-edit"
    labels:
      app: "${APPLICATION_NAME}"
  subjects:
  - kind: ServiceAccount
    name: "${APPLICATION_NAME}-hub"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        annotations:
          alpha.image.policy.openshift.io/resolve-names: "*"
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: "${APPLICATION_NAME}-hub"
        initContainers:
        - name: wait-for-database
          image: "${JUPYTERHUB_IMAGE}"
          command:
          - wait-for-database
          resources:
            limits:
              memory: "${JUPYTERHUB_MEMORY}"
          env:
          - name: JUPYTERHUB_DATABASE_PASSWORD
            value: "${DATABASE_PASSWORD}"
          - name: JUPYTERHUB_DATABASE_HOST
            value: "${APPLICATION_NAME}-db"
          - name: JUPYTERHUB_DATABASE_NAME
            value: postgres
        containers:
        - name: jupyterhub
          image: "${JUPYTERHUB_IMAGE}"
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: "${JUPYTERHUB_MEMORY}"
          env:
          - name: CONFIGURATION_TYPE
            value: workspace
          - name: APPLICATION_NAME
            value: "${APPLICATION_NAME}"
          - name: JUPYTERHUB_NOTEBOOK_IMAGE
            value: "${NOTEBOOK_IMAGE}"
          - name: JUPYTERHUB_NOTEBOOK_MEMORY
            value: "${NOTEBOOK_MEMORY}"
          - name: JUPYTERHUB_NOTEBOOK_INTERFACE
            value: "${NOTEBOOK_INTERFACE}"
          - name: OPENSHIFT_PROJECT
            value: "${OPENSHIFT_PROJECT}"
          - name: JUPYTERHUB_VOLUME_SIZE
            value: "${VOLUME_SIZE}"
          - name: JUPYTERHUB_IDLE_TIMEOUT
            value: "${IDLE_TIMEOUT}"
          - name: JUPYTERHUB_DATABASE_PASSWORD
            value: "${DATABASE_PASSWORD}"
          - name: JUPYTERHUB_DATABASE_HOST
            value: "${APPLICATION_NAME}-db"
          - name: JUPYTERHUB_DATABASE_NAME
            value: postgres
          - name: JUPYTERHUB_COOKIE_SECRET
            value: "${COOKIE_SECRET}"
          - name: OAUTH_CLIENT_SECRET
            value: "${OAUTH_CLIENT_SECRET}"
          - name: LDAP_SERVER
            valueFrom:
              secretKeyRef:
                name: ldap
                key: LDAP_SERVER
          - name: LDAP_BASEDN
            valueFrom:
              secretKeyRef:
                name: ldap
                key: LDAP_BASEDN
          - name: LDAP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ldap
                key: LDAP_PASSWORD
          - name: LDAP_USERNAME
            valueFrom:
              secretKeyRef:
                name: ldap
                key: LDAP_USERNAME


          volumeMounts:
          - name: config
            mountPath: "/opt/app-root/configs"
        volumes:
        - name: config
          configMap:
            name: "${APPLICATION_NAME}-cfg"
            defaultMode: 420
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: 8081-tcp
      protocol: TCP
      port: 8081
      targetPort: 8081
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-db"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "public-jupyter-pvc"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 1Gi
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: "${APPLICATION_NAME}-db"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}-db"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-db"
      spec:
        containers:
        - name: postgresql
          image: bitnami/postgresql:9.6
          env:
          - name: POSTGRESQL_USER
            value: jupyterhub
          - name: POSTGRESQL_PASSWORD
            value: "${DATABASE_PASSWORD}"
          - name: POSTGRESQL_DATABASE
            value: postgres
          ports:
          - containerPort: 5432
            protocol: TCP
          resources:
            limits:
              memory: "${DATABASE_MEMORY}"
          volumeMounts:
          - mountPath: "/var/lib/pgsql/data"
            name: data
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-db"
        - name: config
          configMap:
            name: "${APPLICATION_NAME}-cfg"
            defaultMode: 420
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-db"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 5432-tcp
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-db"
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: notebook
    namespace: "${SPAWNER_NAMESPACE}"
    labels:
      app: "${APPLICATION_NAME}"
- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: create-services
  rules:
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - create
    - get
- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: get-pods
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: "${APPLICATION_NAME}-notebook-create-service"
    namespace: "${SPAWNER_NAMESPACE}"
    labels:
      app: "${APPLICATION_NAME}"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: create-services
  subjects:
  - kind: ServiceAccount
    name: notebook
    namespace: "${SPAWNER_NAMESPACE}"
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: "${APPLICATION_NAME}-notebook-get-pods"
    namespace: "${SPAWNER_NAMESPACE}"
    labels:
      app: "${APPLICATION_NAME}"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: get-pods
  subjects:
  - kind: ServiceAccount
    name: notebook
    namespace: "${SPAWNER_NAMESPACE}"
